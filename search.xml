<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java面向对象</title>
      <link href="/2021/10/13/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/10/13/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象基本概念"><a href="#面向对象基本概念" class="headerlink" title="面向对象基本概念"></a>面向对象基本概念</h1><p>​    面向对象编程（Object-Oriented Programming, OOP）</p><p>​    面向对象的本质就是：以类的方式组织代码，以对象的方式组织（封装）数据。</p><h2 id="如何建立面向对象的思维呢？"><a href="#如何建立面向对象的思维呢？" class="headerlink" title="如何建立面向对象的思维呢？"></a>如何建立面向对象的思维呢？</h2><blockquote><p>1、先整体，再局部</p><p>2、先抽象，再具体</p><p>3、能做什么，再怎么做</p></blockquote><h2 id="面向对象的三大核心特性："><a href="#面向对象的三大核心特性：" class="headerlink" title="面向对象的三大核心特性："></a><strong>面向对象的三大核心特性</strong>：</h2><blockquote><ul><li>可重用性：代码重复使用，减少代码量，提高开发效率。面向对象的三大基本特征（继承、封装和多态）都围绕这个核心。</li><li>可扩展性：指新的功能可以很容易地加入到系统中来，便于软件的修改。</li><li>客观理性：能够将功能与数据结合，方便管理。</li></ul></blockquote><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a><strong>类与对象</strong></h2><p>​    类：类是一种分类，一个类别，一个模板，它描述一类对象的行为和状态，是一组具有相同特性（属性）与行为（方法）的事物集合</p><p>​    对象：是一个个性的产物，是一个个体的特征，是类的一个实例，有状态和行为</p><h3 id="类的定义："><a href="#类的定义：" class="headerlink" title="类的定义："></a>类的定义：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class 类名{    //成员变量    //成员方法}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象的定义："><a href="#对象的定义：" class="headerlink" title="对象的定义："></a>对象的定义：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">类名 对象名 = new 类名();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调用成员变量：</p><blockquote><p>对象名.成员变量；</p></blockquote><p>调用成员方法：</p><blockquote><p>对象名.方法名(参数列表);</p></blockquote><h1 id="Java内存划分"><a href="#Java内存划分" class="headerlink" title="Java内存划分"></a>Java内存划分</h1><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211013202346664.png" alt="image-20211013202346664"></p><h1 id="对象与内存分析"><a href="#对象与内存分析" class="headerlink" title="对象与内存分析"></a><strong>对象与内存分析</strong></h1><p>new 关键字表示创建一个对象</p><p>new 关键字表示实例化对象</p><p>new 关键字表示申请内存空间</p><blockquote><p>注意：如果使用一个没有申请内存空间的对象，会报空指针异常：jav a.lang.NullPointerException</p></blockquote><p><img src="https://img2018.cnblogs.com/blog/1271254/201907/1271254-20190701151646307-720557642.png" alt="img"></p><p><img src="https://img2018.cnblogs.com/blog/1271254/201907/1271254-20190701151704225-1092668522.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/1271254-20190701151720669-482614134.png" alt="img"></p><p><img src="https://img2018.cnblogs.com/blog/1271254/201907/1271254-20190701151826479-1883206851.png" alt="img"></p><p><img src="https://img2018.cnblogs.com/blog/1271254/201907/1271254-20190701151851914-2071010506.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/1271254-20190701151911530-487663432.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/1271254-20190701151930815-1272400797.png" alt="img"></p><p><img src="https://img2018.cnblogs.com/blog/1271254/201907/1271254-20190701151949536-2066971696.png" alt="img"></p><blockquote><p>（1）new关键字：表示向内存申请空间，也表示实例化一个对象，创建一个对象。</p><p>（2）一个对象在内存中的大小，由该对象的所有属性所占的内存大小的总和。引用类型变量在32位系统上占4个字节，在64位系统上占8个字节。加上而        外的对象隐性数据所占的大小。</p><p>（3）相同的类型才可以赋值</p><p>（4）不同的引用，指向同一个对象，任何一个引用改变对象的值，其它引用都会反映出来。</p><p>（5）编程时要注意的问题，在确定不使用对象时，要尽早释放对象：引用=null</p><p>（6）当一个堆中的对象没有被任何引用变量所指向时，该对象会被JVM 的 GC 程序认为是垃圾对象，从而被回收</p></blockquote><h1 id="面向对象的三大特性："><a href="#面向对象的三大特性：" class="headerlink" title="面向对象的三大特性："></a>面向对象的三大特性：</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><blockquote><p>​        封装(Encapsulation)是面向对象的三大特征之一，它指的是将对象的状态信息隐藏在对象内部，不允许外部程序直接访问对象内部信息，而是通过该类所提供的方法来实现对内部信息的操作和访问。</p><p>　　封装是面向对象编程语言对客观世界的模拟，在客观世界里，对象的状态信息都被隐藏在对象内部，外界无法直接操作和修改。比如说一个人的年龄，年龄只会随着时间的流逝而逐渐增长，不能随意修改人的年龄。对一个类或对象实现良好的封装，可以实现以下目的。</p><p>封装有：属性的封装、方法的封装、类的封装、组件的封装、模块化封装、系统级封装…</p><p>封装的好处：模块化、信息隐藏、代码重用、插件化易于调试、具有安全性</p><p>封装的缺点：会影响执行效率</p></blockquote><p>封装之前：属性都可以直接访问和修改</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Person{　　String name;　　int age;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>封装之后：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Person{　　//属性是成员变量，私有化属性，使得其他对象不能直接访问属性　　private String name;　　private int age;　　//参数及方法内定义的变量是局部变量　　public void setName(String name){　　this.name = name;}　　public String getName(){　　return name;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a><strong>构造方法</strong></h2><blockquote><p>（1）构造方法名称与类名相同，没有返回值声明（包括 void）</p><p>（2）构造方法用于初始化数据（属性）</p><p>（3）每一个类中都会有一个默认的无参的构造方法</p><p>（4）如果类中有显示的构造方法，那么默认构造方法将无效</p><p>（5）如果有显示的构造方法，还想保留默认构造 方法，需要显示的写出来。</p><p>（6）构造方法可以有多个，但参数不一样，称为构造方法的重载</p><p>（7）在构造方法中调用另一个构造方法，使用this(…)，该句代码必须在第一句。</p><p>（8）构造方法之间的调用，必须要有出口。</p><p>（9）给对象初始化数据可以使用构造方法或setter方法，通常情况下，两者都会保留。</p><p>（10）一个好的编程习惯是要保留默认的构造方法。（为了方便一些框架代码使用反射来创建对象）</p><p>（11）private Dog(){}，构造方法私有化，当我们的需求是为了 保正该类只有一个对象时（单例模式就是私有化构造器）。</p></blockquote><p>无参构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Dog(){    } //如果一个类没有定义构造方法，则默认无无参构造，如果有定义有参构造，最好再显示定义一个无参构造方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>带参构造方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Dog(String name){this.name = name;}public Dog(String name,int age){this.name = name;this.age = age;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="值传递与引用传递？"><a href="#值传递与引用传递？" class="headerlink" title="值传递与引用传递？"></a><strong>值传递与引用传递？</strong></h2><blockquote><p><strong>首先，注意：在java中只有按值传递，并没有所谓的按引用传递</strong></p></blockquote><p>​    java数据类型可以分为两大类：基本类型（primitive types）和引用类型（reference types）</p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/1271254-20190701153202775-2050721336.png" alt="img"></p><ul><li>基本数据类型的按值传递</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Swap {public static void main(String[] args) {　　int x = 10;　　int y = 20;　　swap(x, y);　　System.out.println("x(2) = " + x);　　System.out.println("y(2) = " + y);}public static void swap(int x, int y) {　　int temp = x;　　x = y;　　y = temp;　　System.out.println("x(1) = " + x);　　System.out.println("y(1) = " + y);}}/*输出x(1) = 20y(1) = 10x(2) = 10y(2) = 20*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    main函数调用swap函数来交换 x，y的值，然而调用函数之后发现main中x，y的值并未交换。包括在Java api中找不到一个可以交换两个变量的方法。这与Java语言的特性有关。通过一个图就可以知道上面程序的运行结果了。</p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/1271254-20190701153455043-1779820622.png" alt="img"></p><p>​    main函数中的x，y和swap函数中的x，y分别存放在不同的区域，在main中调用swap函数的时候，会将main中的x，y的值赋给swap中的x，y。当swap函数中对x，y交换时只是对swap帧中的x，y做交换，并不会改变main中的x，y。所以当函数返回时main中的x，y并不会改变.</p><ul><li>引用数据类型的按值传递</li></ul><p>引用数据数据类型分为三种：①接口 ②类 ③数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static void main(String[] args) {　　int []a={10,20};　　System.out.println("a[0] :"a[0]+"a[1] : "+a[1]);//a[0]=10,a[1]=20;　　swap(a, 0, 1);　　System.out.println("a[0] :"a[0]+"a[1] : "+a[1]);//a[0]=20,a[1]=10;}public static void swap(int []a,int i,int j){　　nt temp=a[i];　　a[i]=a[j];　　a[j]=temp;　　System.out.println("a[0] :"a[0]+"a[1] : "+a[1]);//a[0]=20,a[1]=10;}//输出/*a[0]=10 a[1]=20a[0]=20 a[1]=10a[0]=20 a[1]=10*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    运行程序后发现，swap函数对a[0] ,a[1]的操作竟然影响到了main函数中的a[0] ,a[1]的值，真是不可思议。为什么会产生如此之结果。<strong>原来引用类型的按值传递，传递的是对象的地址</strong></p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/1271254-20190701154246890-805492877.png" alt="img"></p><p>​    由图可以看出在swap中仅仅是得到了数组的地址，并没有对数组的元素进行复制，在swap中对数组的操作是直接对main函数中数组的操作，因此swap函数返回后main函数中的a[0] ,a[1]的值发生交换</p><blockquote><p><strong>参考</strong>：<a href="https://blog.csdn.net/u013309870/article/details/75499175">https://blog.csdn.net/u013309870/article/details/75499175</a></p></blockquote><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a><strong>static关键字</strong></h2><blockquote><p>static关键字的作用：方便在没有创建对象的情况下来进行调用（方法/变量）。</p><p>​    a、使用static关键字修饰一个属性：声明为static的变量实质上就是全局变量</p><p>​    b、使用static关键字修饰一个方法：在一个类中定义一个方法为static，那就是说，无需本类的对象即可调用此方法（类调用）</p><p>​    c、使用static关键字修饰一个类（内部类）：</p><p>声明为static的方法有以下几条限制： </p><p>​    它们仅能调用其他的static 方法，反过来是可以的。 </p><p>​    它们只能访问static数据。 </p><p>​    它们不能以任何方式引用this或super。</p><p>​    不允许用来修饰局部变量</p></blockquote><p>​    一旦使用了<code>static</code>关键字，那么这样的内容将不再属于对象自己，而是属于类，所以凡是本类的对象，都共享一份</p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211013204500835.png" alt="image-20211013204500835"></p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211013204538802.png" alt="image-20211013204538802"></p><blockquote><p>注意：</p><ol><li>静态不能直接访问非静态。原因：应为在内存中是先有的静态内容，后有的非静态内容。“先人不知道后人，但是后人知道先人”</li><li>静态方法当中不能用this。原因：this代表的当前对象，通过谁调用的方法，谁就是当前对象</li></ol></blockquote><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>静态代码块格式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class 类名{    static {        //内容    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>特点：</p><p>​    当第一次用到本类时，静态代码块执行唯一的一次。静态内容总是优先于非静态，所以静态代码块比构造方法先执行。</p><p>用途：</p><p>​    用来一次性的对静态成员变量进行赋值。</p></blockquote><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承是面向对象三大特征之一</p><p>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类</p><p>被继承的类称为父类（超类），继承父类的类称为子类（派生类）</p><p>通过继承可以实现代码重用</p><p>子类拥有父类非 private 的属性、方法。</p><p>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</p><p>子类可以用自己的方式实现父类的方法。</p><p>构造器而言，它只能够被调用，而不能被继承，可以通过使用super()进行调用，</p><p>对于继承而已，子类会默认调用父类的构造器，但是如果没有默认的父类构造器，子类必须要显示的指定父类的构造器（通过super（）），而且必须是在子类构造器中做的第一件事(第一行代码)。</p><p>对于protected而言，它指明就类用户而言，他是private，但是对于任何继承与此类的子类而言或者其他任何位于同一个包的类而言，他却是可以访问的</p><p><code>Java 的继承是单继承，但是可以多重继承</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Dog{private String name;private String sex;public void eat(){System.out.println(“吃饭”);}}public class HomeDog extends Dog{　　//类的定义}public class HuskyDog extends Dog{　　//类的定义}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>继承的好处：</p><ul><li>提高代码的复用性</li><li>提高代码的维护性</li><li>让类与类之间产生关系，是多态的前提</li></ul><p>继承的缺点：</p><p>​    增强了类与类之间的耦合性</p></blockquote><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>在Java中，子类可继承父类中的方法，而不需要重新编写相同的方法。但有时子类并不想原封不动地继承父类的方法，而是想做一定的修改，这就需要采用方法的重写。方法重写又称方法覆盖。</p><p>在子类和父类中，重写方法后，在调用时，以创建的对象类型为准，会调用谁的方法。</p><blockquote><p>重写特性：<br>    a、发生在子父类中，方法重写的两个方法返回值、方法名、参数列表必须完全一致（子类重写父类的方法）<br>    b、子类抛出的异常不能超过父类相应方法抛出的异常（子类异常不能大于父类异常）<br>    c、子类方法的访问级别不能低于父类相应方法的访问级别(子类访问级别不能低于父类访问级别)<br>    d、父类中的方法若使用private、static、final任意修饰符修饰，那么，不能被子类重写。</p></blockquote><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a><strong>this关键字</strong></h3><p>this关键字指向的是当前对象的引用</p><p>调用类中的属性：this.属性名称，指的是访问类中的成员变量，用来区分成员变量和局部变量（重名问题）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Student{    //成员变量    String name;    int age;    int classNum;    public Student(String name,int age,int classNum){            //s1调用了构造方法，所以这里的this代表s1对象        this.name = name; //成员变量name=局部变量name        this.age = age;        this.classNum = classNum;    }        public static void main(String[] args){        Student s1 = new Student("张三",18,1);        System.out.println(s1.name);//打印 张三    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用类中的方法：this.方法名称，用来访问本类的成员方法</p><p>调用类构造方法：this();访问本类的构造方法，()中可以有参数的 如果有参数 就是调用指定的有参构造</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test1 {        public Test1(){        this("张三",18);    }    public Test1(String name,int age){        System.out.println("姓名："+name+"，年龄："+age);    }    public static void main(String[] args) {        Test1 test1 = new Test1();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><ol><li><p>this() 不能使用在普通方法中，只能写在构造方法中</p></li><li><p>必须是构造方法中的第一条语句</p></li></ol></blockquote><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a><strong>super关键字</strong></h3><p>可以理解为对父类的引用，使用super来调用父类的属性，方法，和构造方法</p><p>super可以完成以下的操作：</p><ol><li><p>使用super调用父类中的属性，可以从父类实例处获得信息。</p></li><li><p>使用super调用父类中的方法，可以委托父类对象帮助完成某件事情。</p></li><li>使用super调用父类中的构造方法（super(实参)形式），必须在子类构造方法的第一条语句，调用父类中相应的构造方法，若不显示的写出来，默认调用父类的    无参构造方法，比如：super();</li></ol><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><p>使用final关键字完成以下的操作：</p><ul><li>使用final关键字声明一个常量<br>当final修饰一个基本数据类型时，表示该基本数据类型的值一旦在初始化后便不能发生变化；如果final修饰一个引用类型时，则在对其初始化之后便不能再让其指向其他对象了，但该引用所指向的对象的内容是可以发生变化的</li><li>使用final关键字声明一个方法,该方法为最终方法，且只能被子类继承，但是不能被子类重写。</li><li>使用final关键字声明一个类,该类就转变为最终类，没有子类的类，fianl修饰的类无法被继承。</li><li>在方法参数中使用final，在该方法内部不能修改参数的值（在内部类中详解）</li></ul><p>当final变量是基本数据类型以及String类型时，如果在编译期间能知道它的确切值，则编译器会把它当做编译期常量使用，不过要注意，只有在编译期间能确切知道final变量值的情况下，编译器才会进行这样的优化</p><p>引用变量被final修饰之后，虽然不能再指向其他对象，但是它指向的对象的内容是可变的。</p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211013210801232.png" alt="image-20211013210801232"></p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211013210813736.png" alt="image-20211013210813736"></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>​    即同一个方法可以根据发送对象的不同而采用多种不同的行为方式。</p><p>​    一个对象的实际类型是确定的，但是可以只想对象的用用的类型有多种。</p><p>多态存在的先天条件：</p><pre><code>           1. 有继承关系           2. 子类重写父类方法           3. 父类引用指向子类对象</code></pre><blockquote><p>注意：多态是方法的多态，属性没有多态</p></blockquote><p>多态基本格式：</p><blockquote><p>父类名 对象名 = new 子类名称();</p><p>or</p><p>接口名 对象名 = new 实现类名称();</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Demo01Multi {    public static void main(String[] args){        //左侧父类的引用，指向了右侧子类的对象        Fu obj = new Zi()    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211013211226566.png" alt="image-20211013211226566"></p><p>访问成员变量的两种方式：</p><ol><li>直接通过对象名称访问成员变量，看等号左边是谁，优先用谁，没有则向上找</li><li>间接通过成员方法访问成员变量，看该方法属于谁，就先用谁的，没有则向上找</li></ol><p>在多态的代码中，成员方法的访问规则是：</p><p>​    看new的是谁的，就优先用谁的，没有则向上找</p><blockquote><p>口诀：编译看左边，运行看右边</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211013211623557.png" alt="image-20211013211623557"></p><p>对比成员变量和方法：</p><blockquote><p>成员变量：编译看左边，运行还是看左边</p><p>成员方法：编译看左边，运行看右边</p></blockquote><h3 id="向上下转型："><a href="#向上下转型：" class="headerlink" title="向上下转型："></a>向上下转型：</h3><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211013211830845.png" alt="image-20211013211830845"></p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211013211853746.png" alt="image-20211013211853746"></p><p>向上转型：将子类实例转为父类引用<br>    格式：父类 父类对象 = 子类实例 ； 自动转换</p><p>以基本数据类型操作为例：int i = ‘a’ ;</p><p>（因为char的容量比int小，所以可以自动完成）</p><p>向下转型：将父类实例转为子类实例<br>    格式：子类 子类对象 = （子类）父类实例 ；强制转换<br>以基本数据类型操作为例：char c = (char)97;</p><p>因为整型是4个字节比char 2个字节要大，所以需要强制完成</p><blockquote><p>a、方法的重载与重写就是方法的多态性表现<br>b、多个子类就是父类中的多种形态<br>c、父类引用可以指向子类对象，自动转换<br>d、子类对象指向父类引用需要强制转换（注意：类型不对会报异常）<br>e、在实际开发中尽量使用父类引用（更利于扩展）</p></blockquote><p>指向子类的父类引用由于向上转型了，它只能访问父类中拥有的方法和属性，而对于子类中存在而父类中不存在的方法，<br>该引用是不能使用的，尽管是重载该方法。若子类重写了父类中的某些方法，在调用该些方法的时候，<br>必定是使用子类中定义的这些方法（动态连接、动态调用）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class A{　　void fun1(){}　　void fun2(){}}class B extends A{　　void fun1(String a){} //重载fun1　　void fun2(){} //重写fun2}class C{　　public static void main(String[] args){　　A a = new B();　　a.fun1(); //这里会调用A类的fun1方法，由于向上转型，B的fun1(String a) 会被丢弃　　a.fun2(); //这里调用B的fun2方法，由于是new 的B对象，而B重写了fun2，所以会调用B的fun2}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a>instanceof 关键字</h3><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211013212213006.png" alt="image-20211013212213006"></p><p>该语句一般用于判断一个对象是否为某个类的实例，是返回true，否返回false</p><p>父类的设计法则<br>    通过instanceof关键字，我们可以很方便的检查对象的类型，但如果一个父类的子类过多，这样的判断还是显得很繁琐，那么如何去设计一个父类呢？<br>        a、父类通常情况下都设计为抽象类或接口，其中优先考虑接口，如接口不能满足才考虑抽象类。</p><p>​        <em>b、一个具体的类尽可能不去继承另一个具体类，这样的好处是无需检查对象是否为父类的对象。</em></p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>内部类就是在一个类的内部定义的类。</p><p>成员内部类：内部类对象依赖外部类对象而存在，即在创建一个普通内部类对象时首先需要创建其外部类对象</p><p>内部类对象可以访问外部类对象中所有访问权限的字段，同时，外部类对象也可以通过内部类的对象引用来访问内部类中定义的所有访问权限的字段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Outer {　　class Inner{}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译上述代码会产生两个文件：Outer.class和Outer$Inner.class。</p><p>在外部创建内部类对象</p><p>内部类除了可以在外部类中产生实例化对象，也可以在外部类的外部来实例化。</p><p>那么，根据内部类生成的*.class文件：OuterInner.class“Inner.class“” 符号在程序运行时将替换成“.”</p><p>所以内部类的访问：通过“外部类.内部类”的形式表示。</p><p>内部类实例化对象：</p><p>​    外部类.内部类 内部类对象 = new 外部类().new 内部类();</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Outer out = new Outer() ;// 产生外部类实例Outer.Inner in = null; // 声明内部类对象in = out.new Inner() ; // 实例化内部类对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="局部内部类："><a href="#局部内部类：" class="headerlink" title="局部内部类："></a>局部内部类：</h3><p>内部类可以作为一个类的成员外，还可以把类放在方法内定义（不常用，匿名内部类可以显示局部内部类的功能）。</p><p>在局部内部类里面可以访问外部类对象的所有访问权限的字段，而外部类却不能访问局部内部类中定义的字段</p><blockquote><p>注意：<br>    a、局部内部类只能在定义该内部类的方法内实例化，不可以在此方法外对其实例化。</p><p>​    b、局部内部类对象不能使用该内部类所在方法的非final局部变量。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Outer {　　public void doSomething(){　　class Inner{　　　　public void seeOuter(){}　　}　　}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类:"></a>静态内部类:</h3><p>​    在一个类内部定义一个静态内部类：</p><blockquote><p>注意：static定义的不管是类或方法只能访问static成员，所以static定义的内部类只能访问外部类当中的static属性或者方法。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">class Outer{　　static class Inner{}}class Test {　　public static void main(String[] args){　　Outer.Inner n = new Outer.Inner();}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候Inner内是一个独立的类，如果此时想要实例化Inner类对象，只需要根据“外部类.内部类”的结构实例化对象</p><p>​    外部内.内部类 内部类对象 = new 外部类.内部类();</p><h3 id="匿名内部类："><a href="#匿名内部类：" class="headerlink" title="匿名内部类："></a>匿名内部类：</h3><p>匿名内部类就是没有名字的内部类。</p><p>匿名内部类的三种情况：<br>（1）继承式的匿名内部类<br>（2）接口式的匿名内部类<br>（3）参数式的匿名内部类</p><p>在使用匿名内部类时，要记住以下几个原则：<br>（1）不能有构造方法，只能有一个实例。<br>（2）不能定义任何静态成员、静态方法。<br>（3）不能是public,protected,private,static。<br>（4）一定是在new的后面，用其隐含实现一个接口或继承一个类。<br>（5）匿名内部类为局部的，所以局部内部类的所有限制都对其生效</p><p>​    有时候为了更加方便的体现出匿名内部类的使用，往往可以使用静态方法做一个匿名内部类的实现</p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211013213811174.png" alt="image-20211013213811174"></p><p>与内部类相比，匿名内部类只是一个没有名字的这能使用一次的，并且结构固定的子类</p><p>内部类的作用：</p><p>每个内部类都能独立地继承自一个（接口的）实现，所以无论外部类是否已经继承了某个（接口的）实现，对于内部类都没有影响。如果没有内部类提供的可以继承多个具体的或抽象的类的能力，一些设计与编程问题就很难解决。从这个角度看，内部类使得多重继承的解决方案变得完整。接口解决了部分问题，而内部类有效地实现了“多重继承”。</p><p>依赖外部类对象的：成员内部类，方法内部类，匿名内部类</p><p>静态内部类不依赖外部类的对象。所以，我们在项目中优先考虑选择静态内部类（不会产生内存泄露）</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Django的个人博客</title>
      <link href="/2021/10/05/DjiangoBlog/"/>
      <url>/2021/10/05/DjiangoBlog/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Django的个人博客项目使用"><a href="#基于Django的个人博客项目使用" class="headerlink" title="基于Django的个人博客项目使用"></a>基于Django的个人博客项目使用</h1><blockquote><p> 基于Django的个人博客，前端方面比较普通，没有用什么框架，所以看着比较随意。</p><p>项目地址：<a href="https://github.com/DZ-O/DjangoBlog">https://github.com/DZ-O/DjangoBlog</a></p></blockquote><h2 id="模型层"><a href="#模型层" class="headerlink" title="模型层"></a>模型层</h2><p>​    由于，Django自带的orm语法，使得我们可以不用书写SQL语句也能操作数据库，并且不用事先创建好数据库，只需要在项目应用目录下的models.py中写下每张表所对用的类，而类中的属性则是表中的字段。可根据需要自行修改，代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import timefrom django.db import models# Create your models here.class Article(models.Model):    # 文章表    title = models.CharField(max_length=64, verbose_name='文章标题')    content = models.TextField(verbose_name='文章内容')    create_time = models.DateTimeField(verbose_name='创建时间', auto_now_add=True)    revise_time = models.DateTimeField(verbose_name='修改时间', auto_now=True)    like_count = models.IntegerField(default=0,verbose_name='点赞数')    article_types = models.ForeignKey(to='ArticleType')    introduction = models.CharField(max_length=250,verbose_name='文章简介',default='这是一段简介')   # 文章与文章标签多对多关系通过第三张表Article2ArticleTag建立链接    # 这是半自动创建多对多表关系方式，方便拓展。第三张表的类需要自己手动写。    # 也可以直接使用，自动多对多关系，就不需要手动创建第三张表    article_Tag = models.ManyToManyField(to='ArticleTag',                                         through='Article2ArticleTag',                                         through_fields=('article', 'article_tag')                                         )# 文章分类表class ArticleType(models.Model):    types = models.CharField(max_length=32, verbose_name='文章分类')  # 日常、技术、分享.....# 文章标签表class ArticleTag(models.Model):    tag = models.CharField(max_length=32, verbose_name='文章标签')  # java、pyhon.....# 文章留言表class Message(models.Model):    user = models.CharField(max_length=10, verbose_name='留言人')    message_content = models.CharField(max_length=255, verbose_name='留言')    message_create_time = models.DateTimeField(verbose_name='创建时间', auto_now_add=True)    article = models.ForeignKey(to='Article')# 文章与文章标签多对多关系表class Article2ArticleTag(models.Model):    article = models.ForeignKey(to='Article')    article_tag = models.ForeignKey(to='ArticleTag')# 显示在首页的个人目标，可以不写，在首页的页面写死class Target(models.Model):    target = models.CharField(max_length=100, verbose_name='目标')# 显示在首页的文本句子，可以不写，在首页的页面写死class Text(models.Model):    text = models.CharField(max_length=100, verbose_name='文本')# 首页留言表，这里偷了懒，直接新起了一个表，可以修改文章留言表，就不用创建这张表class HomeMessage(models.Model):    home_message = models.CharField(max_length=100, verbose_name='首页留言')    home_article = models.CharField(max_length=10, verbose_name='作者')    creat_time = models.DateTimeField(verbose_name='留言时间', auto_now_add=True, )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    表模型文件创建完毕后，此时的系统是没有对应的数据库的，需要我们只需数据库迁移命令，在此之前，记得修改项目的<code>settings.py</code>文件中的<code>DATABASES</code>中的内容为自己的数据库配置，</p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211006004633739.png" alt="image-20211006004633739"></p><p>​    如果数据库使用的是MySQL则在项目中的任意<code>__init.py__</code>文件下加入如下内容,:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import pymysqlpymysql.install_as_MySQLdb()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    项目根目录下的控制台执行数据库迁移命令：</p><blockquote><p>python <a href="http://manage.py/">manage.py</a> makemigrations</p><p>python <a href="http://manage.py/">manage.py</a> migrate</p></blockquote><p>​    执行完毕后你的数据库下将会出现如下几张表：</p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211006004519973.png" alt="image-20211006004519973"></p><h2 id="用户登录及后台管理问题"><a href="#用户登录及后台管理问题" class="headerlink" title="用户登录及后台管理问题"></a>用户登录及后台管理问题</h2><blockquote><p>这里有人就发现，我们模型层并没有创建用户类，怎么实现登陆到后台，对自己文章进行发布和管理呢？</p></blockquote><p>​    在这里我们使用Django的Auth模块，他会自动帮我们创建user表。而这个user表中的用户就是Django默认自带的路由<code>admin/</code>登录页面中所需要验证的用户，其中user表中的超级用户既可以登录到admin后台。</p><p>超级用户创建命令：</p><blockquote><p>python3 manage.py createsuperuser</p></blockquote><p>​    而这个后台页面，是Django自动生成的，在这里我们可对数据库进行可视化操作。前提是在配置文件中将数据库注册进去。</p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211006005526886.png" alt="image-20211006005526886"></p><p>​    当然，这个后台页面肯定不是我们需要的，这里我自己手动搭建了一个后台页面，老样子界面依旧简陋：</p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211006005952683.png" alt="image-20211006005952683"></p><p>​    在这里，就能够对文章进行发布及管理等操作了。</p><p>​    当然登录后台的url路由地址也不是使用的Django自动生成admin页面，这里我也自己新建了一个页面：</p><p><img src="https://cdn.jsdelivr.net/gh/DZ-O/CDN/img/image-20211006010313354.png" alt="image-20211006010313354"></p><p>​    验证码这一块，我并没有使用画图模块之类的，偷了个懒，使用的是smtplib模块，使用QQ邮箱发送随机验证码邮件到手上，修改<code>app01/views.py</code>下大概314行左右代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">code += tmp   # 随机验证码在登陆的视图函数里面需要用到 要比对 所以要找地方存起来并且其他视图函数也能拿到   request.session['code'] = code   email_from = "@qq.com"  # 改为自己的发送邮箱   email_to = "@qq.com"  # 接收邮箱   hostname = "smtp.qq.com"  # 不变，QQ邮箱的smtp服务器地址   login = "@qq.com"  # 发送邮箱的用户名   password = ""  # 发送邮箱的密码，即开启smtp服务得到的授权码。注：不是QQ密码。   subject = "贝克街验证码"  # 邮件主题   text = "贝克街验证码:" + code  # 邮件正文内容   smtp = SMTP_SSL(hostname)  # SMTP_SSL默认使用465端口   smtp.login(login, password)   msg = MIMEText(text, "plain", "utf-8")   msg["Subject"] = Header(subject, "utf-8")   msg["from"] = email_from   msg["to"] = email_to   smtp.sendmail(email_from, email_to, msg.as_string())   smtp.quit()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="静态资源收集"><a href="#静态资源收集" class="headerlink" title="静态资源收集"></a>静态资源收集</h2><p>​    项目部署在服务器之前，记得执行项目的静态资源文件收集操作，否则可能会出现静态资源无法访问现象，参考博客：<a href="https://blog.csdn.net/BGONE/article/details/91410220">django项目收集静态文件</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/04/hello-world/"/>
      <url>/2021/10/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
